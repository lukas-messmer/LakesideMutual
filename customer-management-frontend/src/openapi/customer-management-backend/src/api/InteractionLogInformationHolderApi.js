/**
 * Customer Management API
 * This API allows call center operators to interact with customers and to edit their user profiles.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerId from '../model/CustomerId';
import InteractionAcknowledgementDto from '../model/InteractionAcknowledgementDto';
import InteractionLogAggregateRoot from '../model/InteractionLogAggregateRoot';

/**
* InteractionLogInformationHolder service.
* @module api/InteractionLogInformationHolderApi
* @version v1.0.0
*/
export default class InteractionLogInformationHolderApi {

    /**
    * Constructs a new InteractionLogInformationHolderApi. 
    * @alias module:api/InteractionLogInformationHolderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acknowledgeInteractions operation.
     * @callback module:api/InteractionLogInformationHolderApi~acknowledgeInteractionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLogAggregateRoot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Acknowledge all of a given customer's interactions up to the given interaction id.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:model/InteractionAcknowledgementDto} interactionAcknowledgementDto 
     * @param {module:api/InteractionLogInformationHolderApi~acknowledgeInteractionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLogAggregateRoot}
     */
    acknowledgeInteractions(customerId, interactionAcknowledgementDto, callback) {
      let postBody = interactionAcknowledgementDto;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling acknowledgeInteractions");
      }
      // verify the required parameter 'interactionAcknowledgementDto' is set
      if (interactionAcknowledgementDto === undefined || interactionAcknowledgementDto === null) {
        throw new Error("Missing the required parameter 'interactionAcknowledgementDto' when calling acknowledgeInteractions");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InteractionLogAggregateRoot;
      return this.apiClient.callApi(
        '/interaction-logs/{customerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInteractionLog operation.
     * @callback module:api/InteractionLogInformationHolderApi~getInteractionLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InteractionLogAggregateRoot} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the interaction log for a customer with a given customer id.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:api/InteractionLogInformationHolderApi~getInteractionLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InteractionLogAggregateRoot}
     */
    getInteractionLog(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getInteractionLog");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InteractionLogAggregateRoot;
      return this.apiClient.callApi(
        '/interaction-logs/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
