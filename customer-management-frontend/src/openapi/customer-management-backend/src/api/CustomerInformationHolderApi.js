/**
 * Customer Management API
 * This API allows call center operators to interact with customers and to edit their user profiles.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CustomerDto from '../model/CustomerDto';
import CustomerId from '../model/CustomerId';
import CustomerProfileDto from '../model/CustomerProfileDto';
import PaginatedCustomerResponseDto from '../model/PaginatedCustomerResponseDto';

/**
* CustomerInformationHolder service.
* @module api/CustomerInformationHolderApi
* @version v1.0.0
*/
export default class CustomerInformationHolderApi {

    /**
    * Constructs a new CustomerInformationHolderApi. 
    * @alias module:api/CustomerInformationHolderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCustomer operation.
     * @callback module:api/CustomerInformationHolderApi~getCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer with a given customer id.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:api/CustomerInformationHolderApi~getCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDto}
     */
    getCustomer(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CustomerDto;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomers operation.
     * @callback module:api/CustomerInformationHolderApi~getCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedCustomerResponseDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all customers.
     * @param {Object} opts Optional parameters
     * @param {String} [filter = '')] search terms to filter the customers by name
     * @param {Number} [limit = 10)] the maximum number of customers per page
     * @param {Number} [offset = 0)] the offset of the page's first customer
     * @param {module:api/CustomerInformationHolderApi~getCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedCustomerResponseDto}
     */
    getCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PaginatedCustomerResponseDto;
      return this.apiClient.callApi(
        '/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback module:api/CustomerInformationHolderApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the profile of the customer with the given customer id
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:model/CustomerProfileDto} customerProfileDto 
     * @param {module:api/CustomerInformationHolderApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDto}
     */
    updateCustomer(customerId, customerProfileDto, callback) {
      let postBody = customerProfileDto;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }
      // verify the required parameter 'customerProfileDto' is set
      if (customerProfileDto === undefined || customerProfileDto === null) {
        throw new Error("Missing the required parameter 'customerProfileDto' when calling updateCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CustomerDto;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
