/**
 * Customer Management API
 * This API allows call center operators to interact with customers and to edit their user profiles.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddressDto from './AddressDto';
import Link from './Link';

/**
 * The CustomerDto model module.
 * @module model/CustomerDto
 * @version v1.0.0
 */
class CustomerDto {
    /**
     * Constructs a new <code>CustomerDto</code>.
     * @alias module:model/CustomerDto
     */
    constructor() { 
        
        CustomerDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomerDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerDto} obj Optional instance to populate.
     * @return {module:model/CustomerDto} The populated <code>CustomerDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerDto();

            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('birthday')) {
                obj['birthday'] = ApiClient.convertToType(data['birthday'], 'Date');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
            if (data.hasOwnProperty('postalCode')) {
                obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('moveHistory')) {
                obj['moveHistory'] = ApiClient.convertToType(data['moveHistory'], [AddressDto]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [Link]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }
        // ensure the json data is a string
        if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
            throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        if (data['moveHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['moveHistory'])) {
                throw new Error("Expected the field `moveHistory` to be an array in the JSON data but got " + data['moveHistory']);
            }
            // validate the optional field `moveHistory` (array)
            for (const item of data['moveHistory']) {
                AddressDto.validateJSON(item);
            };
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                Link.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} customerId
 */
CustomerDto.prototype['customerId'] = undefined;

/**
 * @member {String} firstname
 */
CustomerDto.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
CustomerDto.prototype['lastname'] = undefined;

/**
 * @member {Date} birthday
 */
CustomerDto.prototype['birthday'] = undefined;

/**
 * @member {String} streetAddress
 */
CustomerDto.prototype['streetAddress'] = undefined;

/**
 * @member {String} postalCode
 */
CustomerDto.prototype['postalCode'] = undefined;

/**
 * @member {String} city
 */
CustomerDto.prototype['city'] = undefined;

/**
 * @member {String} email
 */
CustomerDto.prototype['email'] = undefined;

/**
 * @member {String} phoneNumber
 */
CustomerDto.prototype['phoneNumber'] = undefined;

/**
 * @member {Array.<module:model/AddressDto>} moveHistory
 */
CustomerDto.prototype['moveHistory'] = undefined;

/**
 * @member {Array.<module:model/Link>} links
 */
CustomerDto.prototype['links'] = undefined;






export default CustomerDto;

