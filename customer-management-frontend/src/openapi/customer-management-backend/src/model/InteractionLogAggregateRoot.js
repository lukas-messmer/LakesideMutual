/**
 * Customer Management API
 * This API allows call center operators to interact with customers and to edit their user profiles.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InteractionEntity from './InteractionEntity';

/**
 * The InteractionLogAggregateRoot model module.
 * @module model/InteractionLogAggregateRoot
 * @version v1.0.0
 */
class InteractionLogAggregateRoot {
    /**
     * Constructs a new <code>InteractionLogAggregateRoot</code>.
     * @alias module:model/InteractionLogAggregateRoot
     */
    constructor() { 
        
        InteractionLogAggregateRoot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InteractionLogAggregateRoot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InteractionLogAggregateRoot} obj Optional instance to populate.
     * @return {module:model/InteractionLogAggregateRoot} The populated <code>InteractionLogAggregateRoot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InteractionLogAggregateRoot();

            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('lastAcknowledgedInteractionId')) {
                obj['lastAcknowledgedInteractionId'] = ApiClient.convertToType(data['lastAcknowledgedInteractionId'], 'String');
            }
            if (data.hasOwnProperty('interactions')) {
                obj['interactions'] = ApiClient.convertToType(data['interactions'], [InteractionEntity]);
            }
            if (data.hasOwnProperty('numberOfUnacknowledgedInteractions')) {
                obj['numberOfUnacknowledgedInteractions'] = ApiClient.convertToType(data['numberOfUnacknowledgedInteractions'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InteractionLogAggregateRoot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InteractionLogAggregateRoot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['lastAcknowledgedInteractionId'] && !(typeof data['lastAcknowledgedInteractionId'] === 'string' || data['lastAcknowledgedInteractionId'] instanceof String)) {
            throw new Error("Expected the field `lastAcknowledgedInteractionId` to be a primitive type in the JSON string but got " + data['lastAcknowledgedInteractionId']);
        }
        if (data['interactions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['interactions'])) {
                throw new Error("Expected the field `interactions` to be an array in the JSON data but got " + data['interactions']);
            }
            // validate the optional field `interactions` (array)
            for (const item of data['interactions']) {
                InteractionEntity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {String} customerId
 */
InteractionLogAggregateRoot.prototype['customerId'] = undefined;

/**
 * @member {String} username
 */
InteractionLogAggregateRoot.prototype['username'] = undefined;

/**
 * @member {String} lastAcknowledgedInteractionId
 */
InteractionLogAggregateRoot.prototype['lastAcknowledgedInteractionId'] = undefined;

/**
 * @member {Array.<module:model/InteractionEntity>} interactions
 */
InteractionLogAggregateRoot.prototype['interactions'] = undefined;

/**
 * @member {Number} numberOfUnacknowledgedInteractions
 */
InteractionLogAggregateRoot.prototype['numberOfUnacknowledgedInteractions'] = undefined;






export default InteractionLogAggregateRoot;

