/**
 * Customer Self-Service API
 * This API allows customers of Lakeside Mutual to sign up, log in and manage their policies and user profile themselves.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressDto from '../model/AddressDto';
import CustomerDto from '../model/CustomerDto';
import CustomerId from '../model/CustomerId';
import CustomerRegistrationRequestDto from '../model/CustomerRegistrationRequestDto';
import InsuranceQuoteRequestDto from '../model/InsuranceQuoteRequestDto';

/**
* CustomerInformationHolder service.
* @module api/CustomerInformationHolderApi
* @version v1.0.0
*/
export default class CustomerInformationHolderApi {

    /**
    * Constructs a new CustomerInformationHolderApi. 
    * @alias module:api/CustomerInformationHolderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeAddress operation.
     * @callback module:api/CustomerInformationHolderApi~changeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddressDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change a customer's address.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:model/AddressDto} addressDto 
     * @param {module:api/CustomerInformationHolderApi~changeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddressDto}
     */
    changeAddress(customerId, addressDto, callback) {
      let postBody = addressDto;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling changeAddress");
      }
      // verify the required parameter 'addressDto' is set
      if (addressDto === undefined || addressDto === null) {
        throw new Error("Missing the required parameter 'addressDto' when calling changeAddress");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = AddressDto;
      return this.apiClient.callApi(
        '/customers/{customerId}/address', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomer operation.
     * @callback module:api/CustomerInformationHolderApi~getCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer with a given customer id.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:api/CustomerInformationHolderApi~getCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDto}
     */
    getCustomer(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CustomerDto;
      return this.apiClient.callApi(
        '/customers/{customerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsuranceQuoteRequests1 operation.
     * @callback module:api/CustomerInformationHolderApi~getInsuranceQuoteRequests1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InsuranceQuoteRequestDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a customer's insurance quote requests.
     * @param {module:model/CustomerId} customerId the customer's unique id
     * @param {module:api/CustomerInformationHolderApi~getInsuranceQuoteRequests1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InsuranceQuoteRequestDto>}
     */
    getInsuranceQuoteRequests1(customerId, callback) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getInsuranceQuoteRequests1");
      }

      let pathParams = {
        'customerId': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InsuranceQuoteRequestDto];
      return this.apiClient.callApi(
        '/customers/{customerId}/insurance-quote-requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerCustomer operation.
     * @callback module:api/CustomerInformationHolderApi~registerCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete the registration of a new customer.
     * @param {module:model/CustomerRegistrationRequestDto} customerRegistrationRequestDto 
     * @param {module:api/CustomerInformationHolderApi~registerCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerDto}
     */
    registerCustomer(customerRegistrationRequestDto, callback) {
      let postBody = customerRegistrationRequestDto;
      // verify the required parameter 'customerRegistrationRequestDto' is set
      if (customerRegistrationRequestDto === undefined || customerRegistrationRequestDto === null) {
        throw new Error("Missing the required parameter 'customerRegistrationRequestDto' when calling registerCustomer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = CustomerDto;
      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
