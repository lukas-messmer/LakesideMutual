/**
 * Customer Self-Service API
 * This API allows customers of Lakeside Mutual to sign up, log in and manage their policies and user profile themselves.
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InsuranceQuoteRequestDto from '../model/InsuranceQuoteRequestDto';
import InsuranceQuoteResponseDto from '../model/InsuranceQuoteResponseDto';

/**
* InsuranceQuoteRequestCoordinator service.
* @module api/InsuranceQuoteRequestCoordinatorApi
* @version v1.0.0
*/
export default class InsuranceQuoteRequestCoordinatorApi {

    /**
    * Constructs a new InsuranceQuoteRequestCoordinatorApi. 
    * @alias module:api/InsuranceQuoteRequestCoordinatorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createInsuranceQuoteRequest operation.
     * @callback module:api/InsuranceQuoteRequestCoordinatorApi~createInsuranceQuoteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsuranceQuoteRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Insurance Quote Request.
     * @param {module:model/InsuranceQuoteRequestDto} insuranceQuoteRequestDto 
     * @param {module:api/InsuranceQuoteRequestCoordinatorApi~createInsuranceQuoteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsuranceQuoteRequestDto}
     */
    createInsuranceQuoteRequest(insuranceQuoteRequestDto, callback) {
      let postBody = insuranceQuoteRequestDto;
      // verify the required parameter 'insuranceQuoteRequestDto' is set
      if (insuranceQuoteRequestDto === undefined || insuranceQuoteRequestDto === null) {
        throw new Error("Missing the required parameter 'insuranceQuoteRequestDto' when calling createInsuranceQuoteRequest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InsuranceQuoteRequestDto;
      return this.apiClient.callApi(
        '/insurance-quote-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsuranceQuoteRequest operation.
     * @callback module:api/InsuranceQuoteRequestCoordinatorApi~getInsuranceQuoteRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsuranceQuoteRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Insurance Quote Request.
     * @param {Number} insuranceQuoteRequestId the insurance quote request's unique id
     * @param {module:api/InsuranceQuoteRequestCoordinatorApi~getInsuranceQuoteRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsuranceQuoteRequestDto}
     */
    getInsuranceQuoteRequest(insuranceQuoteRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'insuranceQuoteRequestId' is set
      if (insuranceQuoteRequestId === undefined || insuranceQuoteRequestId === null) {
        throw new Error("Missing the required parameter 'insuranceQuoteRequestId' when calling getInsuranceQuoteRequest");
      }

      let pathParams = {
        'insuranceQuoteRequestId': insuranceQuoteRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InsuranceQuoteRequestDto;
      return this.apiClient.callApi(
        '/insurance-quote-requests/{insuranceQuoteRequestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInsuranceQuoteRequests operation.
     * @callback module:api/InsuranceQuoteRequestCoordinatorApi~getInsuranceQuoteRequestsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InsuranceQuoteRequestDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Insurance Quote Requests.
     * @param {module:api/InsuranceQuoteRequestCoordinatorApi~getInsuranceQuoteRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InsuranceQuoteRequestDto>}
     */
    getInsuranceQuoteRequests(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InsuranceQuoteRequestDto];
      return this.apiClient.callApi(
        '/insurance-quote-requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the respondToInsuranceQuote operation.
     * @callback module:api/InsuranceQuoteRequestCoordinatorApi~respondToInsuranceQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InsuranceQuoteRequestDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the status of an existing Insurance Quote Request
     * @param {Number} id the insurance quote request's unique id
     * @param {module:model/InsuranceQuoteResponseDto} insuranceQuoteResponseDto 
     * @param {module:api/InsuranceQuoteRequestCoordinatorApi~respondToInsuranceQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InsuranceQuoteRequestDto}
     */
    respondToInsuranceQuote(id, insuranceQuoteResponseDto, callback) {
      let postBody = insuranceQuoteResponseDto;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling respondToInsuranceQuote");
      }
      // verify the required parameter 'insuranceQuoteResponseDto' is set
      if (insuranceQuoteResponseDto === undefined || insuranceQuoteResponseDto === null) {
        throw new Error("Missing the required parameter 'insuranceQuoteResponseDto' when calling respondToInsuranceQuote");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = InsuranceQuoteRequestDto;
      return this.apiClient.callApi(
        '/insurance-quote-requests/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
